{"ast":null,"code":"import _classCallCheck from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Transport } from \"../transport.js\";\nimport yeast from \"yeast\";\nimport parseqs from \"parseqs\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport var Polling = /*#__PURE__*/function (_Transport) {\n  _inherits(Polling, _Transport);\n\n  function Polling() {\n    var _this;\n\n    _classCallCheck(this, Polling);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Polling).apply(this, arguments));\n    _this.polling = false;\n    return _this;\n  }\n  /**\n   * Transport name.\n   */\n\n\n  _createClass(Polling, [{\n    key: \"doOpen\",\n\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n    value: function doOpen() {\n      this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause(onPause) {\n      var _this2 = this;\n\n      this.readyState = \"pausing\";\n\n      var pause = function pause() {\n        _this2.readyState = \"paused\";\n        onPause();\n      };\n\n      if (this.polling || !this.writable) {\n        var total = 0;\n\n        if (this.polling) {\n          total++;\n          this.once(\"pollComplete\", function () {\n            --total || pause();\n          });\n        }\n\n        if (!this.writable) {\n          total++;\n          this.once(\"drain\", function () {\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      this.polling = true;\n      this.doPoll();\n      this.emit(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var _this3 = this;\n\n      var callback = function callback(packet) {\n        // if its the first message we consider the transport open\n        if (\"opening\" === _this3.readyState && packet.type === \"open\") {\n          _this3.onOpen();\n        } // if its a close packet, we close the ongoing requests\n\n\n        if (\"close\" === packet.type) {\n          _this3.onClose();\n\n          return false;\n        } // otherwise bypass onData and handle the message\n\n\n        _this3.onPacket(packet);\n      }; // decode payload\n\n\n      decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this.polling = false;\n        this.emit(\"pollComplete\");\n\n        if (\"open\" === this.readyState) {\n          this.poll();\n        } else {}\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      var _this4 = this;\n\n      var close = function close() {\n        _this4.write([{\n          type: \"close\"\n        }]);\n      };\n\n      if (\"open\" === this.readyState) {\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this5 = this;\n\n      this.writable = false;\n      encodePayload(packets, function (data) {\n        _this5.doWrite(data, function () {\n          _this5.writable = true;\n\n          _this5.emit(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var query = this.query || {};\n      var schema = this.opts.secure ? \"https\" : \"http\";\n      var port = \"\"; // cache busting is forced\n\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      }\n\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      } // avoid port if default for schema\n\n\n      if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n        port = \":\" + this.opts.port;\n      }\n\n      var encodedQuery = parseqs.encode(query);\n      var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n      return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return \"polling\";\n    }\n  }]);\n\n  return Polling;\n}(Transport);","map":null,"metadata":{},"sourceType":"module"}